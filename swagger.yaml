openapi: 3.0.0
info:
  title: Task Manager API
  version: 1.0.0
  description: A RESTful API for managing tasks with modern features

servers:
  - url: http://localhost:5000
    description: Development server

components:
  schemas:
    Task:
      type: object
      required:
        - name
      properties:
        _id:
          type: string
          description: The auto-generated id of the task
          readOnly: true
        name:
          type: string
          description: The name of the task
          example: Buy groceries
        description:
          type: string
          description: Detailed description of the task
          example: Remember to buy milk, eggs, and bread.
        priority:
          type: string
          description: Priority of the task
          enum: ['low', 'medium', 'high']
          default: 'medium'
          example: 'high'
        dueDate:
          type: string
          format: date
          description: Due date for the task
          example: '2024-12-31'
        completed:
          type: boolean
          description: The completion status of the task
          default: false
        createdAt:
          type: string
          format: date-time
          description: The date the task was created
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: The date the task was last updated
          readOnly: true
    TaskInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the task
          example: Buy groceries
        description:
          type: string
          description: Detailed description of the task
          example: Remember to buy milk, eggs, and bread.
        priority:
          type: string
          description: Priority of the task
          enum: ['low', 'medium', 'high']
          default: 'medium'
          example: 'high'
        dueDate:
          type: string
          format: date
          description: Due date for the task
          example: '2024-12-31'
        completed:
          type: boolean
          description: Whether the task is completed
          default: false

paths:
  /api/v1/tasks:
    get:
      summary: Get all tasks
      description: Retrieve a list of all tasks. Can be filtered by 'completed' status or 'priority', and sorted by 'dueDate' or 'priority'.
      parameters:
        - name: completed
          in: query
          description: Filter tasks by completion status
          required: false
          schema:
            type: boolean
        - name: priority
          in: query
          description: Filter tasks by priority
          required: false
          schema:
            type: string
            enum: ['low', 'medium', 'high']
        - name: sortBy
          in: query
          description: Sort tasks by 'dueDate' or 'priority'
          required: false
          schema:
            type: string
            enum: ['dueDate', 'priority']
        - name: order
          in: query
          description: Order of sorting ('asc' or 'desc')
          required: false
          schema:
            type: string
            enum: ['asc', 'desc']
            default: 'asc'
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task
      description: Create a new task with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid input

  /api/v1/tasks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: The task id
    get:
      summary: Get a task by ID
      description: Retrieve a specific task by its ID
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
    patch:
      summary: Update a task
      description: Update a specific task by its ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput' # Can be a partial update schema
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid input
        '404':
          description: Task not found
    delete:
      summary: Delete a task
      description: Delete a specific task by its ID
      responses:
        '200':
          description: Task deleted successfully
        '404':
          description: Task not found